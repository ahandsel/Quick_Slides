{
  "version": 3,
  "sources": ["../monaco-editor/esm/vs/basic-languages/scala/scala.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    /*\n     * `...` is allowed as an identifier.\n     * $ is allowed in identifiers.\n     * unary_<op> is allowed as an identifier.\n     * <name>_= is allowed as an identifier.\n     */\n    wordPattern: /(unary_[@~!#%^&*()\\-=+\\\\|:<>\\/?]+)|([a-zA-Z_$][\\w$]*?_=)|(`[^`]+`)|([a-zA-Z_$][\\w$]*)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: \"'\", close: \"'\" }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp('^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))'),\n            end: new RegExp('^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))')\n        }\n    }\n};\nexport var language = {\n    tokenPostfix: '.scala',\n    // We can't easily add everything from Dotty, but we can at least add some of its keywords\n    keywords: [\n        'asInstanceOf',\n        'catch',\n        'class',\n        'classOf',\n        'def',\n        'do',\n        'else',\n        'extends',\n        'finally',\n        'for',\n        'foreach',\n        'forSome',\n        'if',\n        'import',\n        'isInstanceOf',\n        'macro',\n        'match',\n        'new',\n        'object',\n        'package',\n        'return',\n        'throw',\n        'trait',\n        'try',\n        'type',\n        'until',\n        'val',\n        'var',\n        'while',\n        'with',\n        'yield',\n        // Dotty-specific:\n        'given',\n        'enum',\n        'then'\n    ],\n    // Dotty-specific:\n    softKeywords: ['as', 'export', 'extension', 'end', 'derives', 'on'],\n    constants: ['true', 'false', 'null', 'this', 'super'],\n    modifiers: [\n        'abstract',\n        'final',\n        'implicit',\n        'lazy',\n        'override',\n        'private',\n        'protected',\n        'sealed'\n    ],\n    // Dotty-specific:\n    softModifiers: ['inline', 'opaque', 'open', 'transparent', 'using'],\n    name: /(?:[a-z_$][\\w$]*|`[^`]+`)/,\n    type: /(?:[A-Z][\\w$]*)/,\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/^\\\\%@#]+/,\n    digits: /\\d+(_+\\d+)*/,\n    hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n    // C# style strings\n    escapes: /\\\\(?:[btnfr\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    fstring_conv: /[bBhHsScCdoxXeEfgGaAt]|[Tn](?:[HIklMSLNpzZsQ]|[BbhAaCYyjmde]|[RTrDFC])/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // strings\n            [/\\braw\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@rawstringt' }],\n            [/\\braw\"/, { token: 'string.quote', bracket: '@open', next: '@rawstring' }],\n            [/\\bs\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@sstringt' }],\n            [/\\bs\"/, { token: 'string.quote', bracket: '@open', next: '@sstring' }],\n            [/\\bf\"\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@fstringt' }],\n            [/\\bf\"/, { token: 'string.quote', bracket: '@open', next: '@fstring' }],\n            [/\"\"\"/, { token: 'string.quote', bracket: '@open', next: '@stringt' }],\n            [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }],\n            // numbers\n            [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float', '@allowMethod'],\n            [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float', '@allowMethod'],\n            [/0[xX](@hexdigits)[Ll]?/, 'number.hex', '@allowMethod'],\n            [/(@digits)[fFdD]/, 'number.float', '@allowMethod'],\n            [/(@digits)[lL]?/, 'number', '@allowMethod'],\n            [/\\b_\\*/, 'key'],\n            [/\\b(_)\\b/, 'keyword', '@allowMethod'],\n            // identifiers and keywords\n            [/\\bimport\\b/, 'keyword', '@import'],\n            [/\\b(case)([ \\t]+)(class)\\b/, ['keyword.modifier', 'white', 'keyword']],\n            [/\\bcase\\b/, 'keyword', '@case'],\n            [/\\bva[lr]\\b/, 'keyword', '@vardef'],\n            [\n                /\\b(def)([ \\t]+)((?:unary_)?@symbols|@name(?:_=)|@name)/,\n                ['keyword', 'white', 'identifier']\n            ],\n            [/@name(?=[ \\t]*:(?!:))/, 'variable'],\n            [/(\\.)(@name|@symbols)/, ['operator', { token: '@rematch', next: '@allowMethod' }]],\n            [/([{(])(\\s*)(@name(?=\\s*=>))/, ['@brackets', 'white', 'variable']],\n            [\n                /@name/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@softKeywords': 'keyword',\n                        '@modifiers': 'keyword.modifier',\n                        '@softModifiers': 'keyword.modifier',\n                        '@constants': {\n                            token: 'constant',\n                            next: '@allowMethod'\n                        },\n                        '@default': {\n                            token: 'identifier',\n                            next: '@allowMethod'\n                        }\n                    }\n                }\n            ],\n            [/@type/, 'type', '@allowMethod'],\n            // whitespace\n            { include: '@whitespace' },\n            // @ annotations.\n            [/@[a-zA-Z_$][\\w$]*(?:\\.[a-zA-Z_$][\\w$]*)*/, 'annotation'],\n            // delimiters and operators\n            [/[{(]/, '@brackets'],\n            [/[})]/, '@brackets', '@allowMethod'],\n            [/\\[/, 'operator.square'],\n            [/](?!\\s*(?:va[rl]|def|type)\\b)/, 'operator.square', '@allowMethod'],\n            [/]/, 'operator.square'],\n            [/([=-]>|<-|>:|<:|:>|<%)(?=[\\s\\w()[\\]{},\\.\"'`])/, 'keyword'],\n            [/@symbols/, 'operator'],\n            // delimiter: after number because of .\\d floats\n            [/[;,\\.]/, 'delimiter'],\n            // symbols\n            [/'[a-zA-Z$][\\w$]*(?!')/, 'attribute.name'],\n            // characters\n            [/'[^\\\\']'/, 'string', '@allowMethod'],\n            [\n                /(')(@escapes)(')/,\n                ['string', 'string.escape', { token: 'string', next: '@allowMethod' }]\n            ],\n            [/'/, 'string.invalid']\n        ],\n        import: [\n            [/;/, 'delimiter', '@pop'],\n            [/^|$/, '', '@pop'],\n            [/[ \\t]+/, 'white'],\n            [/[\\n\\r]+/, 'white', '@pop'],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/@name|@type/, 'type'],\n            [/[(){}]/, '@brackets'],\n            [/[[\\]]/, 'operator.square'],\n            [/[\\.,]/, 'delimiter']\n        ],\n        allowMethod: [\n            [/^|$/, '', '@pop'],\n            [/[ \\t]+/, 'white'],\n            [/[\\n\\r]+/, 'white', '@pop'],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/(?==>[\\s\\w([{])/, 'keyword', '@pop'],\n            [\n                /(@name|@symbols)(?=[ \\t]*[[({\"'`]|[ \\t]+(?:[+-]?\\.?\\d|\\w))/,\n                {\n                    cases: {\n                        '@keywords': { token: 'keyword', next: '@pop' },\n                        '->|<-|>:|<:|<%': { token: 'keyword', next: '@pop' },\n                        '@default': { token: '@rematch', next: '@pop' }\n                    }\n                }\n            ],\n            ['', '', '@pop']\n        ],\n        comment: [\n            [/[^\\/*]+/, 'comment'],\n            [/\\/\\*/, 'comment', '@push'],\n            [/\\*\\//, 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        case: [\n            [/\\b_\\*/, 'key'],\n            [/\\b(_|true|false|null|this|super)\\b/, 'keyword', '@allowMethod'],\n            [/\\bif\\b|=>/, 'keyword', '@pop'],\n            [/`[^`]+`/, 'identifier', '@allowMethod'],\n            [/@name/, 'variable', '@allowMethod'],\n            [/:::?|\\||@(?![a-z_$])/, 'keyword'],\n            { include: '@root' }\n        ],\n        vardef: [\n            [/\\b_\\*/, 'key'],\n            [/\\b(_|true|false|null|this|super)\\b/, 'keyword'],\n            [/@name/, 'variable'],\n            [/:::?|\\||@(?![a-z_$])/, 'keyword'],\n            [/=|:(?!:)/, 'operator', '@pop'],\n            [/$/, 'white', '@pop'],\n            { include: '@root' }\n        ],\n        string: [\n            [/[^\\\\\"\\n\\r]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [\n                /\"/,\n                {\n                    token: 'string.quote',\n                    bracket: '@close',\n                    switchTo: '@allowMethod'\n                }\n            ]\n        ],\n        stringt: [\n            [/[^\\\\\"\\n\\r]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"(?=\"\"\")/, 'string'],\n            [\n                /\"\"\"/,\n                {\n                    token: 'string.quote',\n                    bracket: '@close',\n                    switchTo: '@allowMethod'\n                }\n            ],\n            [/\"/, 'string']\n        ],\n        fstring: [\n            [/@escapes/, 'string.escape'],\n            [\n                /\"/,\n                {\n                    token: 'string.quote',\n                    bracket: '@close',\n                    switchTo: '@allowMethod'\n                }\n            ],\n            [/\\$\\$/, 'string'],\n            [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\n            [/\\$\\{/, 'operator', '@interp'],\n            [/%%/, 'string'],\n            [\n                /(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/,\n                ['metatag', 'keyword.modifier', 'number', 'metatag']\n            ],\n            [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'number', 'metatag']],\n            [/(%)([\\-#+ 0,(])(@fstring_conv)/, ['metatag', 'keyword.modifier', 'metatag']],\n            [/(%)(@fstring_conv)/, ['metatag', 'metatag']],\n            [/./, 'string']\n        ],\n        fstringt: [\n            [/@escapes/, 'string.escape'],\n            [/\"(?=\"\"\")/, 'string'],\n            [\n                /\"\"\"/,\n                {\n                    token: 'string.quote',\n                    bracket: '@close',\n                    switchTo: '@allowMethod'\n                }\n            ],\n            [/\\$\\$/, 'string'],\n            [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\n            [/\\$\\{/, 'operator', '@interp'],\n            [/%%/, 'string'],\n            [\n                /(%)([\\-#+ 0,(])(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/,\n                ['metatag', 'keyword.modifier', 'number', 'metatag']\n            ],\n            [/(%)(\\d+|\\.\\d+|\\d+\\.\\d+)(@fstring_conv)/, ['metatag', 'number', 'metatag']],\n            [/(%)([\\-#+ 0,(])(@fstring_conv)/, ['metatag', 'keyword.modifier', 'metatag']],\n            [/(%)(@fstring_conv)/, ['metatag', 'metatag']],\n            [/./, 'string']\n        ],\n        sstring: [\n            [/@escapes/, 'string.escape'],\n            [\n                /\"/,\n                {\n                    token: 'string.quote',\n                    bracket: '@close',\n                    switchTo: '@allowMethod'\n                }\n            ],\n            [/\\$\\$/, 'string'],\n            [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\n            [/\\$\\{/, 'operator', '@interp'],\n            [/./, 'string']\n        ],\n        sstringt: [\n            [/@escapes/, 'string.escape'],\n            [/\"(?=\"\"\")/, 'string'],\n            [\n                /\"\"\"/,\n                {\n                    token: 'string.quote',\n                    bracket: '@close',\n                    switchTo: '@allowMethod'\n                }\n            ],\n            [/\\$\\$/, 'string'],\n            [/(\\$)([a-z_]\\w*)/, ['operator', 'identifier']],\n            [/\\$\\{/, 'operator', '@interp'],\n            [/./, 'string']\n        ],\n        interp: [[/{/, 'operator', '@push'], [/}/, 'operator', '@pop'], { include: '@root' }],\n        rawstring: [\n            [/[^\"]/, 'string'],\n            [\n                /\"/,\n                {\n                    token: 'string.quote',\n                    bracket: '@close',\n                    switchTo: '@allowMethod'\n                }\n            ]\n        ],\n        rawstringt: [\n            [/[^\"]/, 'string'],\n            [/\"(?=\"\"\")/, 'string'],\n            [\n                /\"\"\"/,\n                {\n                    token: 'string.quote',\n                    bracket: '@close',\n                    switchTo: '@allowMethod'\n                }\n            ],\n            [/\"/, 'string']\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, 'white'],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment']\n        ]\n    }\n};\n"],
  "mappings": "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",
  "names": []
}
