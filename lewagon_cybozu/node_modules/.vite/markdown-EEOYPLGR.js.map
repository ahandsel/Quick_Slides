{
  "version": 3,
  "sources": ["../monaco-editor/esm/vs/basic-languages/markdown/markdown.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    comments: {\n        blockComment: ['<!--', '-->']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>', notIn: ['string'] }\n    ],\n    surroundingPairs: [\n        { open: '(', close: ')' },\n        { open: '[', close: ']' },\n        { open: '`', close: '`' }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp('^\\\\s*<!--\\\\s*#?region\\\\b.*-->'),\n            end: new RegExp('^\\\\s*<!--\\\\s*#?endregion\\\\b.*-->')\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.md',\n    // escape codes\n    control: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n    noncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n    escapes: /\\\\(?:@control)/,\n    // escape codes for javascript/CSS strings\n    jsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n    // non matched elements\n    empty: [\n        'area',\n        'base',\n        'basefont',\n        'br',\n        'col',\n        'frame',\n        'hr',\n        'img',\n        'input',\n        'isindex',\n        'link',\n        'meta',\n        'param'\n    ],\n    tokenizer: {\n        root: [\n            // markdown tables\n            [/^\\s*\\|/, '@rematch', '@table_header'],\n            // headers (with #)\n            [\n                /^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/,\n                ['white', 'keyword', 'keyword', 'keyword']\n            ],\n            // headers (with =)\n            [/^\\s*(=+|\\-+)\\s*$/, 'keyword'],\n            // headers (with ***)\n            [/^\\s*((\\*[ ]?)+)\\s*$/, 'meta.separator'],\n            // quote\n            [/^\\s*>+/, 'comment'],\n            // list (starting with * or number)\n            [/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, 'keyword'],\n            // code block (4 spaces indent)\n            [/^(\\t|[ ]{4})[^ ].*$/, 'string'],\n            // code block (3 tilde)\n            [/^\\s*~~~\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, { token: 'string', next: '@codeblock' }],\n            // github style code blocks (with backticks and language)\n            [\n                /^\\s*```\\s*((?:\\w|[\\/\\-#])+).*$/,\n                { token: 'string', next: '@codeblockgh', nextEmbedded: '$1' }\n            ],\n            // github style code blocks (with backticks but no language)\n            [/^\\s*```\\s*$/, { token: 'string', next: '@codeblock' }],\n            // markup within lines\n            { include: '@linecontent' }\n        ],\n        table_header: [\n            { include: '@table_common' },\n            [/[^\\|]+/, 'keyword.table.header'] // table header\n        ],\n        table_body: [{ include: '@table_common' }, { include: '@linecontent' }],\n        table_common: [\n            [/\\s*[\\-:]+\\s*/, { token: 'keyword', switchTo: 'table_body' }],\n            [/^\\s*\\|/, 'keyword.table.left'],\n            [/^\\s*[^\\|]/, '@rematch', '@pop'],\n            [/^\\s*$/, '@rematch', '@pop'],\n            [\n                /\\|/,\n                {\n                    cases: {\n                        '@eos': 'keyword.table.right',\n                        '@default': 'keyword.table.middle' // inner |\n                    }\n                }\n            ]\n        ],\n        codeblock: [\n            [/^\\s*~~~\\s*$/, { token: 'string', next: '@pop' }],\n            [/^\\s*```\\s*$/, { token: 'string', next: '@pop' }],\n            [/.*$/, 'variable.source']\n        ],\n        // github style code blocks\n        codeblockgh: [\n            [/```\\s*$/, { token: 'variable.source', next: '@pop', nextEmbedded: '@pop' }],\n            [/[^`]+/, 'variable.source']\n        ],\n        linecontent: [\n            // escapes\n            [/&\\w+;/, 'string.escape'],\n            [/@escapes/, 'escape'],\n            // various markup\n            [/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, 'strong'],\n            [/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, 'strong'],\n            [/\\b_[^_]+_\\b/, 'emphasis'],\n            [/\\*([^\\\\*]|@escapes)+\\*/, 'emphasis'],\n            [/`([^\\\\`]|@escapes)+`/, 'variable'],\n            // links\n            [/\\{+[^}]+\\}+/, 'string.target'],\n            [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, ['string.link', '', 'string.link']],\n            [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, 'string.link'],\n            // or html\n            { include: 'html' }\n        ],\n        // Note: it is tempting to rather switch to the real HTML mode instead of building our own here\n        // but currently there is a limitation in Monarch that prevents us from doing it: The opening\n        // '<' would start the HTML mode, however there is no way to jump 1 character back to let the\n        // HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\n        // we cannot correctly tokenize it in that mode yet.\n        html: [\n            // html tags\n            [/<(\\w+)\\/>/, 'tag'],\n            [\n                /<(\\w+)/,\n                {\n                    cases: {\n                        '@empty': { token: 'tag', next: '@tag.$1' },\n                        '@default': { token: 'tag', next: '@tag.$1' }\n                    }\n                }\n            ],\n            [/<\\/(\\w+)\\s*>/, { token: 'tag' }],\n            [/<!--/, 'comment', '@comment']\n        ],\n        comment: [\n            [/[^<\\-]+/, 'comment.content'],\n            [/-->/, 'comment', '@pop'],\n            [/<!--/, 'comment.content.invalid'],\n            [/[<\\-]/, 'comment.content']\n        ],\n        // Almost full HTML tag matching, complete with embedded scripts & styles\n        tag: [\n            [/[ \\t\\r\\n]+/, 'white'],\n            [\n                /(type)(\\s*=\\s*)(\")([^\"]+)(\")/,\n                [\n                    'attribute.name.html',\n                    'delimiter.html',\n                    'string.html',\n                    { token: 'string.html', switchTo: '@tag.$S2.$4' },\n                    'string.html'\n                ]\n            ],\n            [\n                /(type)(\\s*=\\s*)(')([^']+)(')/,\n                [\n                    'attribute.name.html',\n                    'delimiter.html',\n                    'string.html',\n                    { token: 'string.html', switchTo: '@tag.$S2.$4' },\n                    'string.html'\n                ]\n            ],\n            [\n                /(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/,\n                ['attribute.name.html', 'delimiter.html', 'string.html']\n            ],\n            [/\\w+/, 'attribute.name.html'],\n            [/\\/>/, 'tag', '@pop'],\n            [\n                />/,\n                {\n                    cases: {\n                        '$S2==style': {\n                            token: 'tag',\n                            switchTo: 'embeddedStyle',\n                            nextEmbedded: 'text/css'\n                        },\n                        '$S2==script': {\n                            cases: {\n                                $S3: {\n                                    token: 'tag',\n                                    switchTo: 'embeddedScript',\n                                    nextEmbedded: '$S3'\n                                },\n                                '@default': {\n                                    token: 'tag',\n                                    switchTo: 'embeddedScript',\n                                    nextEmbedded: 'text/javascript'\n                                }\n                            }\n                        },\n                        '@default': { token: 'tag', next: '@pop' }\n                    }\n                }\n            ]\n        ],\n        embeddedStyle: [\n            [/[^<]+/, ''],\n            [/<\\/style\\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\n            [/</, '']\n        ],\n        embeddedScript: [\n            [/[^<]+/, ''],\n            [/<\\/script\\s*>/, { token: '@rematch', next: '@pop', nextEmbedded: '@pop' }],\n            [/</, '']\n        ]\n    }\n};\n"],
  "mappings": "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",
  "names": []
}
