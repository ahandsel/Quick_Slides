{
  "version": 3,
  "sources": ["../monaco-editor/esm/vs/basic-languages/xml/xml.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { languages } from '../fillers/monaco-editor-core.js';\nexport var conf = {\n    comments: {\n        blockComment: ['<!--', '-->']\n    },\n    brackets: [['<', '>']],\n    autoClosingPairs: [\n        { open: '<', close: '>' },\n        { open: \"'\", close: \"'\" },\n        { open: '\"', close: '\"' }\n    ],\n    surroundingPairs: [\n        { open: '<', close: '>' },\n        { open: \"'\", close: \"'\" },\n        { open: '\"', close: '\"' }\n    ],\n    onEnterRules: [\n        {\n            beforeText: new RegExp(\"<([_:\\\\w][_:\\\\w-.\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n            afterText: /^<\\/([_:\\w][_:\\w-.\\d]*)\\s*>$/i,\n            action: {\n                indentAction: languages.IndentAction.IndentOutdent\n            }\n        },\n        {\n            beforeText: new RegExp(\"<(\\\\w[\\\\w\\\\d]*)([^/>]*(?!/)>)[^<]*$\", 'i'),\n            action: { indentAction: languages.IndentAction.Indent }\n        }\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.xml',\n    ignoreCase: true,\n    // Useful regular expressions\n    qualifiedName: /(?:[\\w\\.\\-]+:)?[\\w\\.\\-]+/,\n    tokenizer: {\n        root: [\n            [/[^<&]+/, ''],\n            { include: '@whitespace' },\n            // Standard opening tag\n            [/(<)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'tag', next: '@tag' }]],\n            // Standard closing tag\n            [\n                /(<\\/)(@qualifiedName)(\\s*)(>)/,\n                [{ token: 'delimiter' }, { token: 'tag' }, '', { token: 'delimiter' }]\n            ],\n            // Meta tags - instruction\n            [/(<\\?)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'metatag', next: '@tag' }]],\n            // Meta tags - declaration\n            [/(<\\!)(@qualifiedName)/, [{ token: 'delimiter' }, { token: 'metatag', next: '@tag' }]],\n            // CDATA\n            [/<\\!\\[CDATA\\[/, { token: 'delimiter.cdata', next: '@cdata' }],\n            [/&\\w+;/, 'string.escape']\n        ],\n        cdata: [\n            [/[^\\]]+/, ''],\n            [/\\]\\]>/, { token: 'delimiter.cdata', next: '@pop' }],\n            [/\\]/, '']\n        ],\n        tag: [\n            [/[ \\t\\r\\n]+/, ''],\n            [\n                /(@qualifiedName)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/,\n                ['attribute.name', '', 'attribute.value']\n            ],\n            [\n                /(@qualifiedName)(\\s*=\\s*)(\"[^\">?\\/]*|'[^'>?\\/]*)(?=[\\?\\/]\\>)/,\n                ['attribute.name', '', 'attribute.value']\n            ],\n            [\n                /(@qualifiedName)(\\s*=\\s*)(\"[^\">]*|'[^'>]*)/,\n                ['attribute.name', '', 'attribute.value']\n            ],\n            [/@qualifiedName/, 'attribute.name'],\n            [/\\?>/, { token: 'delimiter', next: '@pop' }],\n            [/(\\/)(>)/, [{ token: 'tag' }, { token: 'delimiter', next: '@pop' }]],\n            [/>/, { token: 'delimiter', next: '@pop' }]\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/<!--/, { token: 'comment', next: '@comment' }]\n        ],\n        comment: [\n            [/[^<\\-]+/, 'comment.content'],\n            [/-->/, { token: 'comment', next: '@pop' }],\n            [/<!--/, 'comment.content.invalid'],\n            [/[<\\-]/, 'comment.content']\n        ]\n    }\n};\n"],
  "mappings": ";;;;;;;AAKO,IAAI,OAAO;AAAA,EACd,UAAU;AAAA,IACN,cAAc,CAAC,QAAQ;AAAA;AAAA,EAE3B,UAAU,CAAC,CAAC,KAAK;AAAA,EACjB,kBAAkB;AAAA,IACd,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA;AAAA,EAExB,kBAAkB;AAAA,IACd,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA;AAAA,EAExB,cAAc;AAAA,IACV;AAAA,MACI,YAAY,IAAI,OAAO,+CAA+C;AAAA,MACtE,WAAW;AAAA,MACX,QAAQ;AAAA,QACJ,cAAc,UAAU,aAAa;AAAA;AAAA;AAAA,IAG7C;AAAA,MACI,YAAY,IAAI,OAAO,uCAAuC;AAAA,MAC9D,QAAQ,EAAE,cAAc,UAAU,aAAa;AAAA;AAAA;AAAA;AAIpD,IAAI,WAAW;AAAA,EAClB,cAAc;AAAA,EACd,cAAc;AAAA,EACd,YAAY;AAAA,EAEZ,eAAe;AAAA,EACf,WAAW;AAAA,IACP,MAAM;AAAA,MACF,CAAC,UAAU;AAAA,MACX,EAAE,SAAS;AAAA,MAEX,CAAC,uBAAuB,CAAC,EAAE,OAAO,eAAe,EAAE,OAAO,OAAO,MAAM;AAAA,MAEvE;AAAA,QACI;AAAA,QACA,CAAC,EAAE,OAAO,eAAe,EAAE,OAAO,SAAS,IAAI,EAAE,OAAO;AAAA;AAAA,MAG5D,CAAC,yBAAyB,CAAC,EAAE,OAAO,eAAe,EAAE,OAAO,WAAW,MAAM;AAAA,MAE7E,CAAC,yBAAyB,CAAC,EAAE,OAAO,eAAe,EAAE,OAAO,WAAW,MAAM;AAAA,MAE7E,CAAC,gBAAgB,EAAE,OAAO,mBAAmB,MAAM;AAAA,MACnD,CAAC,SAAS;AAAA;AAAA,IAEd,OAAO;AAAA,MACH,CAAC,UAAU;AAAA,MACX,CAAC,SAAS,EAAE,OAAO,mBAAmB,MAAM;AAAA,MAC5C,CAAC,MAAM;AAAA;AAAA,IAEX,KAAK;AAAA,MACD,CAAC,cAAc;AAAA,MACf;AAAA,QACI;AAAA,QACA,CAAC,kBAAkB,IAAI;AAAA;AAAA,MAE3B;AAAA,QACI;AAAA,QACA,CAAC,kBAAkB,IAAI;AAAA;AAAA,MAE3B;AAAA,QACI;AAAA,QACA,CAAC,kBAAkB,IAAI;AAAA;AAAA,MAE3B,CAAC,kBAAkB;AAAA,MACnB,CAAC,OAAO,EAAE,OAAO,aAAa,MAAM;AAAA,MACpC,CAAC,WAAW,CAAC,EAAE,OAAO,SAAS,EAAE,OAAO,aAAa,MAAM;AAAA,MAC3D,CAAC,KAAK,EAAE,OAAO,aAAa,MAAM;AAAA;AAAA,IAEtC,YAAY;AAAA,MACR,CAAC,cAAc;AAAA,MACf,CAAC,QAAQ,EAAE,OAAO,WAAW,MAAM;AAAA;AAAA,IAEvC,SAAS;AAAA,MACL,CAAC,WAAW;AAAA,MACZ,CAAC,OAAO,EAAE,OAAO,WAAW,MAAM;AAAA,MAClC,CAAC,QAAQ;AAAA,MACT,CAAC,SAAS;AAAA;AAAA;AAAA;",
  "names": []
}
