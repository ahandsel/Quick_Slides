{
  "version": 3,
  "sources": ["../monaco-editor/esm/vs/basic-languages/graphql/graphql.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    comments: {\n        lineComment: '#'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"\"\"', close: '\"\"\"', notIn: ['string', 'comment'] },\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"\"\"', close: '\"\"\"' },\n        { open: '\"', close: '\"' }\n    ],\n    folding: {\n        offSide: true\n    }\n};\nexport var language = {\n    // Set defaultToken to invalid to see what you do not tokenize yet\n    defaultToken: 'invalid',\n    tokenPostfix: '.gql',\n    keywords: [\n        'null',\n        'true',\n        'false',\n        'query',\n        'mutation',\n        'subscription',\n        'extend',\n        'schema',\n        'directive',\n        'scalar',\n        'type',\n        'interface',\n        'union',\n        'enum',\n        'input',\n        'implements',\n        'fragment',\n        'on'\n    ],\n    typeKeywords: ['Int', 'Float', 'String', 'Boolean', 'ID'],\n    directiveLocations: [\n        'SCHEMA',\n        'SCALAR',\n        'OBJECT',\n        'FIELD_DEFINITION',\n        'ARGUMENT_DEFINITION',\n        'INTERFACE',\n        'UNION',\n        'ENUM',\n        'ENUM_VALUE',\n        'INPUT_OBJECT',\n        'INPUT_FIELD_DEFINITION',\n        'QUERY',\n        'MUTATION',\n        'SUBSCRIPTION',\n        'FIELD',\n        'FRAGMENT_DEFINITION',\n        'FRAGMENT_SPREAD',\n        'INLINE_FRAGMENT',\n        'VARIABLE_DEFINITION'\n    ],\n    operators: ['=', '!', '?', ':', '&', '|'],\n    // we include these common regular expressions\n    symbols: /[=!?:&|]+/,\n    // https://facebook.github.io/graphql/draft/#sec-String-Value\n    escapes: /\\\\(?:[\"\\\\\\/bfnrt]|u[0-9A-Fa-f]{4})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // fields and argument names\n            [\n                /[a-z_][\\w$]*/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'key.identifier'\n                    }\n                }\n            ],\n            // identify typed input variables\n            [\n                /[$][\\w$]*/,\n                {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'argument.identifier'\n                    }\n                }\n            ],\n            // to show class names nicely\n            [\n                /[A-Z][\\w\\$]*/,\n                {\n                    cases: {\n                        '@typeKeywords': 'keyword',\n                        '@default': 'type.identifier'\n                    }\n                }\n            ],\n            // whitespace\n            { include: '@whitespace' },\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/@symbols/, { cases: { '@operators': 'operator', '@default': '' } }],\n            // @ annotations.\n            // As an example, we emit a debugging log message on these tokens.\n            // Note: message are supressed during the first load -- change some lines to see them.\n            [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, { token: 'annotation', log: 'annotation token: $0' }],\n            // numbers\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/0[xX][0-9a-fA-F]+/, 'number.hex'],\n            [/\\d+/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            [/\"\"\"/, { token: 'string', next: '@mlstring', nextEmbedded: 'markdown' }],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, { token: 'string.quote', bracket: '@open', next: '@string' }]\n        ],\n        mlstring: [\n            [/[^\"]+/, 'string'],\n            ['\"\"\"', { token: 'string', next: '@pop', nextEmbedded: '@pop' }]\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, { token: 'string.quote', bracket: '@close', next: '@pop' }]\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/#.*$/, 'comment']\n        ]\n    }\n};\n"],
  "mappings": ";;;AAIO,IAAI,OAAO;AAAA,EACd,UAAU;AAAA,IACN,aAAa;AAAA;AAAA,EAEjB,UAAU;AAAA,IACN,CAAC,KAAK;AAAA,IACN,CAAC,KAAK;AAAA,IACN,CAAC,KAAK;AAAA;AAAA,EAEV,kBAAkB;AAAA,IACd,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,OAAO,OAAO,OAAO,OAAO,CAAC,UAAU;AAAA,IAC/C,EAAE,MAAM,KAAK,OAAO,KAAK,OAAO,CAAC,UAAU;AAAA;AAAA,EAE/C,kBAAkB;AAAA,IACd,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,KAAK,OAAO;AAAA,IACpB,EAAE,MAAM,OAAO,OAAO;AAAA,IACtB,EAAE,MAAM,KAAK,OAAO;AAAA;AAAA,EAExB,SAAS;AAAA,IACL,SAAS;AAAA;AAAA;AAGV,IAAI,WAAW;AAAA,EAElB,cAAc;AAAA,EACd,cAAc;AAAA,EACd,UAAU;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,EAEJ,cAAc,CAAC,OAAO,SAAS,UAAU,WAAW;AAAA,EACpD,oBAAoB;AAAA,IAChB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA,EAEJ,WAAW,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK;AAAA,EAErC,SAAS;AAAA,EAET,SAAS;AAAA,EAET,WAAW;AAAA,IACP,MAAM;AAAA,MAEF;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,YACH,aAAa;AAAA,YACb,YAAY;AAAA;AAAA;AAAA;AAAA,MAKxB;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,YACH,aAAa;AAAA,YACb,YAAY;AAAA;AAAA;AAAA;AAAA,MAKxB;AAAA,QACI;AAAA,QACA;AAAA,UACI,OAAO;AAAA,YACH,iBAAiB;AAAA,YACjB,YAAY;AAAA;AAAA;AAAA;AAAA,MAKxB,EAAE,SAAS;AAAA,MAEX,CAAC,cAAc;AAAA,MACf,CAAC,YAAY,EAAE,OAAO,EAAE,cAAc,YAAY,YAAY;AAAA,MAI9D,CAAC,0BAA0B,EAAE,OAAO,cAAc,KAAK;AAAA,MAEvD,CAAC,4BAA4B;AAAA,MAC7B,CAAC,qBAAqB;AAAA,MACtB,CAAC,OAAO;AAAA,MAER,CAAC,SAAS;AAAA,MACV,CAAC,OAAO,EAAE,OAAO,UAAU,MAAM,aAAa,cAAc;AAAA,MAE5D,CAAC,mBAAmB;AAAA,MACpB,CAAC,KAAK,EAAE,OAAO,gBAAgB,SAAS,SAAS,MAAM;AAAA;AAAA,IAE3D,UAAU;AAAA,MACN,CAAC,SAAS;AAAA,MACV,CAAC,OAAO,EAAE,OAAO,UAAU,MAAM,QAAQ,cAAc;AAAA;AAAA,IAE3D,QAAQ;AAAA,MACJ,CAAC,WAAW;AAAA,MACZ,CAAC,YAAY;AAAA,MACb,CAAC,OAAO;AAAA,MACR,CAAC,KAAK,EAAE,OAAO,gBAAgB,SAAS,UAAU,MAAM;AAAA;AAAA,IAE5D,YAAY;AAAA,MACR,CAAC,cAAc;AAAA,MACf,CAAC,QAAQ;AAAA;AAAA;AAAA;",
  "names": []
}
