{
  "version": 3,
  "sources": ["../monaco-editor/esm/vs/basic-languages/csharp/csharp.js"],
  "sourcesContent": ["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var conf = {\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\$\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/']\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: \"'\", close: \"'\", notIn: ['string', 'comment'] },\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] }\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '<', close: '>' },\n        { open: \"'\", close: \"'\" },\n        { open: '\"', close: '\"' }\n    ],\n    folding: {\n        markers: {\n            start: new RegExp('^\\\\s*#region\\\\b'),\n            end: new RegExp('^\\\\s*#endregion\\\\b')\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.cs',\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    keywords: [\n        'extern',\n        'alias',\n        'using',\n        'bool',\n        'decimal',\n        'sbyte',\n        'byte',\n        'short',\n        'ushort',\n        'int',\n        'uint',\n        'long',\n        'ulong',\n        'char',\n        'float',\n        'double',\n        'object',\n        'dynamic',\n        'string',\n        'assembly',\n        'is',\n        'as',\n        'ref',\n        'out',\n        'this',\n        'base',\n        'new',\n        'typeof',\n        'void',\n        'checked',\n        'unchecked',\n        'default',\n        'delegate',\n        'var',\n        'const',\n        'if',\n        'else',\n        'switch',\n        'case',\n        'while',\n        'do',\n        'for',\n        'foreach',\n        'in',\n        'break',\n        'continue',\n        'goto',\n        'return',\n        'throw',\n        'try',\n        'catch',\n        'finally',\n        'lock',\n        'yield',\n        'from',\n        'let',\n        'where',\n        'join',\n        'on',\n        'equals',\n        'into',\n        'orderby',\n        'ascending',\n        'descending',\n        'select',\n        'group',\n        'by',\n        'namespace',\n        'partial',\n        'class',\n        'field',\n        'event',\n        'method',\n        'param',\n        'public',\n        'protected',\n        'internal',\n        'private',\n        'abstract',\n        'sealed',\n        'static',\n        'struct',\n        'readonly',\n        'volatile',\n        'virtual',\n        'override',\n        'params',\n        'get',\n        'set',\n        'add',\n        'remove',\n        'operator',\n        'true',\n        'false',\n        'implicit',\n        'explicit',\n        'interface',\n        'enum',\n        'null',\n        'async',\n        'await',\n        'fixed',\n        'sizeof',\n        'stackalloc',\n        'unsafe',\n        'nameof',\n        'when'\n    ],\n    namespaceFollows: ['namespace', 'using'],\n    parenFollows: ['if', 'for', 'while', 'switch', 'foreach', 'using', 'catch', 'when'],\n    operators: [\n        '=',\n        '??',\n        '||',\n        '&&',\n        '|',\n        '^',\n        '&',\n        '==',\n        '!=',\n        '<=',\n        '>=',\n        '<<',\n        '+',\n        '-',\n        '*',\n        '/',\n        '%',\n        '!',\n        '~',\n        '++',\n        '--',\n        '+=',\n        '-=',\n        '*=',\n        '/=',\n        '%=',\n        '&=',\n        '|=',\n        '^=',\n        '<<=',\n        '>>=',\n        '>>',\n        '=>'\n    ],\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    // escape sequences\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [\n                /\\@?[a-zA-Z_]\\w*/,\n                {\n                    cases: {\n                        '@namespaceFollows': {\n                            token: 'keyword.$0',\n                            next: '@namespace'\n                        },\n                        '@keywords': {\n                            token: 'keyword.$0',\n                            next: '@qualified'\n                        },\n                        '@default': { token: 'identifier', next: '@qualified' }\n                    }\n                }\n            ],\n            // whitespace\n            { include: '@whitespace' },\n            // delimiters and operators\n            [\n                /}/,\n                {\n                    cases: {\n                        '$S2==interpolatedstring': {\n                            token: 'string.quote',\n                            next: '@pop'\n                        },\n                        '$S2==litinterpstring': {\n                            token: 'string.quote',\n                            next: '@pop'\n                        },\n                        '@default': '@brackets'\n                    }\n                }\n            ],\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [\n                /@symbols/,\n                {\n                    cases: {\n                        '@operators': 'delimiter',\n                        '@default': ''\n                    }\n                }\n            ],\n            // numbers\n            [/[0-9_]*\\.[0-9_]+([eE][\\-+]?\\d+)?[fFdD]?/, 'number.float'],\n            [/0[xX][0-9a-fA-F_]+/, 'number.hex'],\n            [/0[bB][01_]+/, 'number.hex'],\n            [/[0-9_]+/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, { token: 'string.quote', next: '@string' }],\n            [/\\$\\@\"/, { token: 'string.quote', next: '@litinterpstring' }],\n            [/\\@\"/, { token: 'string.quote', next: '@litstring' }],\n            [/\\$\"/, { token: 'string.quote', next: '@interpolatedstring' }],\n            // characters\n            [/'[^\\\\']'/, 'string'],\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n            [/'/, 'string.invalid']\n        ],\n        qualified: [\n            [\n                /[a-zA-Z_][\\w]*/,\n                {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': 'identifier'\n                    }\n                }\n            ],\n            [/\\./, 'delimiter'],\n            ['', '', '@pop']\n        ],\n        namespace: [\n            { include: '@whitespace' },\n            [/[A-Z]\\w*/, 'namespace'],\n            [/[\\.=]/, 'delimiter'],\n            ['', '', '@pop']\n        ],\n        comment: [\n            [/[^\\/*]+/, 'comment'],\n            // [/\\/\\*/,    'comment', '@push' ],    // no nested comments :-(\n            ['\\\\*/', 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, { token: 'string.quote', next: '@pop' }]\n        ],\n        litstring: [\n            [/[^\"]+/, 'string'],\n            [/\"\"/, 'string.escape'],\n            [/\"/, { token: 'string.quote', next: '@pop' }]\n        ],\n        litinterpstring: [\n            [/[^\"{]+/, 'string'],\n            [/\"\"/, 'string.escape'],\n            [/{{/, 'string.escape'],\n            [/}}/, 'string.escape'],\n            [/{/, { token: 'string.quote', next: 'root.litinterpstring' }],\n            [/\"/, { token: 'string.quote', next: '@pop' }]\n        ],\n        interpolatedstring: [\n            [/[^\\\\\"{]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/{{/, 'string.escape'],\n            [/}}/, 'string.escape'],\n            [/{/, { token: 'string.quote', next: 'root.interpolatedstring' }],\n            [/\"/, { token: 'string.quote', next: '@pop' }]\n        ],\n        whitespace: [\n            [/^[ \\t\\v\\f]*#((r)|(load))(?=\\s)/, 'directive.csx'],\n            [/^[ \\t\\v\\f]*#\\w.*$/, 'namespace.cpp'],\n            [/[ \\t\\v\\f\\r\\n]+/, ''],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment']\n        ]\n    }\n};\n"],
  "mappings": "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",
  "names": []
}
